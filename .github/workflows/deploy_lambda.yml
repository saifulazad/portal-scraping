
name: Deploy AWS infra on AWS 

on: 
  push: #On Push Event We need to take action
    branches: 
      - master

jobs: #Workflow run is made up of one or more jobs
  provision_infra:
    name: update lambda function
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - uses: pre-commit/action@v2.0.3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      working-directory: extractor
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Setup Terraform
      env:
        TFVARFILE: ${{ secrets.TFVARFILE }}
      run: |
          echo $TFVARFILE | base64 --decode  > terraform.tfvars
      working-directory: infrastructure
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    # Test code
    - name: Test with pytest
      run: |
        pytest
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init 
      working-directory: infrastructure
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Apply
      run: terraform apply -auto-approve -var-file=terraform.tfvars -input=false
      working-directory: infrastructure
